// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetCoin.Data;

namespace VetCoin.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210107132206_migration8201")]
    partial class migration8201
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("VetCoin.Data.CoinTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecivedVetMemberId")
                        .HasColumnType("int");

                    b.Property<int>("SendeVetMemberId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecivedVetMemberId");

                    b.HasIndex("SendeVetMemberId");

                    b.ToTable("CoinTransactions");
                });

            modelBuilder.Entity("VetCoin.Data.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AgreementContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConsultationRequest")
                        .HasColumnType("int");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<bool>("ContractorSigne")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EscrowTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("Reword")
                        .HasColumnType("int");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.Property<bool>("TraderSigne")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EscrowTransactionId");

                    b.HasIndex("TradeId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("VetCoin.Data.ContractImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageContent")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractImages");
                });

            modelBuilder.Entity("VetCoin.Data.ContractMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("ContractMessage");
                });

            modelBuilder.Entity("VetCoin.Data.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationState")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VetMemberId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("VetCoin.Data.DonationLikeVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("DonationLikeVotes");
                });

            modelBuilder.Entity("VetCoin.Data.DonationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.ToTable("DonationLogs");
                });

            modelBuilder.Entity("VetCoin.Data.DonationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("DonationMessages");
                });

            modelBuilder.Entity("VetCoin.Data.Doner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CoinTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<int>("DonerState")
                        .HasColumnType("int");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoinTransactionId");

                    b.HasIndex("DonationId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("Doners");
                });

            modelBuilder.Entity("VetCoin.Data.JsonParam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JsonBody")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JsonParams");
                });

            modelBuilder.Entity("VetCoin.Data.ReactionMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReactionMaps");
                });

            modelBuilder.Entity("VetCoin.Data.RuleTextLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleMarkdown")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RuleTextLogs");
                });

            modelBuilder.Entity("VetCoin.Data.ScheduleExecutionTicket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Enviroment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleExecutionTickets");
                });

            modelBuilder.Entity("VetCoin.Data.ScheduledExecutionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Finished")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FunctionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasException")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ScheduledExecutionLogs");
                });

            modelBuilder.Entity("VetCoin.Data.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fee")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VetMemberId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("VetCoin.Data.SubscriptionMember", b =>
                {
                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VetMemberId", "SubscriptionId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionMembers");
                });

            modelBuilder.Entity("VetCoin.Data.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConsultationRequest")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<bool>("IsContinued")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("OrderRefDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Reward")
                        .HasColumnType("int");

                    b.Property<string>("RewardComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VetMemberId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("VetCoin.Data.TradeImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("ImageContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeId");

                    b.ToTable("TradeImages");
                });

            modelBuilder.Entity("VetCoin.Data.TradeLikeVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("TradeLikeVotes");
                });

            modelBuilder.Entity("VetCoin.Data.TradeMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("TradeMessages");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.Vender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultAmount")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDeliveryMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreeAmmount")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VetMemberId");

                    b.ToTable("Venders");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.VenderLikeVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenderId")
                        .HasColumnType("int");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenderId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("VenderLikeVotes");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.VenderMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenderId")
                        .HasColumnType("int");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenderId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("VenderMessages");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.VenderSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenderId")
                        .HasColumnType("int");

                    b.Property<int>("VetMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenderId");

                    b.HasIndex("VetMemberId");

                    b.ToTable("VenderSales");
                });

            modelBuilder.Entity("VetCoin.Data.VetMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AvatarId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Markdown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId");

                    b.ToTable("VetMembers");
                });

            modelBuilder.Entity("VetCoin.Data.CoinTransaction", b =>
                {
                    b.HasOne("VetCoin.Data.VetMember", "RecivedVetMember")
                        .WithMany("RecivedTransactions")
                        .HasForeignKey("RecivedVetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "SendVetMember")
                        .WithMany("SendTransactions")
                        .HasForeignKey("SendeVetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RecivedVetMember");

                    b.Navigation("SendVetMember");
                });

            modelBuilder.Entity("VetCoin.Data.Contract", b =>
                {
                    b.HasOne("VetCoin.Data.CoinTransaction", "EscrowTransaction")
                        .WithMany("EscrowContracts")
                        .HasForeignKey("EscrowTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VetCoin.Data.Trade", "Trade")
                        .WithMany("Contracts")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EscrowTransaction");

                    b.Navigation("Trade");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.ContractImage", b =>
                {
                    b.HasOne("VetCoin.Data.Contract", "Contract")
                        .WithMany("ContractImages")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("VetCoin.Data.ContractMessage", b =>
                {
                    b.HasOne("VetCoin.Data.Contract", "Contract")
                        .WithMany("ContractMessages")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.Donation", b =>
                {
                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.DonationLikeVote", b =>
                {
                    b.HasOne("VetCoin.Data.Donation", "Donation")
                        .WithMany("DonationLikeVotes")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Donation");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.DonationLog", b =>
                {
                    b.HasOne("VetCoin.Data.Donation", "Donation")
                        .WithMany("DonationLogs")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("VetCoin.Data.DonationMessage", b =>
                {
                    b.HasOne("VetCoin.Data.Donation", "Donation")
                        .WithMany("DonationMessages")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donation");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.Doner", b =>
                {
                    b.HasOne("VetCoin.Data.CoinTransaction", "CoinTransaction")
                        .WithMany()
                        .HasForeignKey("CoinTransactionId");

                    b.HasOne("VetCoin.Data.Donation", "Donation")
                        .WithMany("Doners")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CoinTransaction");

                    b.Navigation("Donation");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.Subscription", b =>
                {
                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.SubscriptionMember", b =>
                {
                    b.HasOne("VetCoin.Data.Subscription", "Subscription")
                        .WithMany("SubscriptionMembers")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.Trade", b =>
                {
                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.TradeImage", b =>
                {
                    b.HasOne("VetCoin.Data.Trade", "Trade")
                        .WithMany("TradeImages")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("VetCoin.Data.TradeLikeVote", b =>
                {
                    b.HasOne("VetCoin.Data.Trade", "Trade")
                        .WithMany("TradeLikeVotes")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trade");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.TradeMessage", b =>
                {
                    b.HasOne("VetCoin.Data.Trade", "Trade")
                        .WithMany("TradeMessages")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trade");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.Vender", b =>
                {
                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.VenderLikeVote", b =>
                {
                    b.HasOne("VetCoin.Data.VenerEntityes.Vender", "Vender")
                        .WithMany("VenderLikeVotes")
                        .HasForeignKey("VenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vender");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.VenderMessage", b =>
                {
                    b.HasOne("VetCoin.Data.VenerEntityes.Vender", "Vender")
                        .WithMany("VenderMessages")
                        .HasForeignKey("VenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vender");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.VenderSale", b =>
                {
                    b.HasOne("VetCoin.Data.VenerEntityes.Vender", "Vender")
                        .WithMany("VenderSales")
                        .HasForeignKey("VenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetCoin.Data.VetMember", "VetMember")
                        .WithMany()
                        .HasForeignKey("VetMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vender");

                    b.Navigation("VetMember");
                });

            modelBuilder.Entity("VetCoin.Data.CoinTransaction", b =>
                {
                    b.Navigation("EscrowContracts");
                });

            modelBuilder.Entity("VetCoin.Data.Contract", b =>
                {
                    b.Navigation("ContractImages");

                    b.Navigation("ContractMessages");
                });

            modelBuilder.Entity("VetCoin.Data.Donation", b =>
                {
                    b.Navigation("DonationLikeVotes");

                    b.Navigation("DonationLogs");

                    b.Navigation("DonationMessages");

                    b.Navigation("Doners");
                });

            modelBuilder.Entity("VetCoin.Data.Subscription", b =>
                {
                    b.Navigation("SubscriptionMembers");
                });

            modelBuilder.Entity("VetCoin.Data.Trade", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("TradeImages");

                    b.Navigation("TradeLikeVotes");

                    b.Navigation("TradeMessages");
                });

            modelBuilder.Entity("VetCoin.Data.VenerEntityes.Vender", b =>
                {
                    b.Navigation("VenderLikeVotes");

                    b.Navigation("VenderMessages");

                    b.Navigation("VenderSales");
                });

            modelBuilder.Entity("VetCoin.Data.VetMember", b =>
                {
                    b.Navigation("RecivedTransactions");

                    b.Navigation("SendTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
