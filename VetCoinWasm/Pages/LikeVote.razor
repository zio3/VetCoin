@page "/likeVote"
@inject Api.IDonateLikeVotesClient DonateLikeVotesClient
@inject Api.ITradeLikeVotesClient TradeLikeVotesClient
@inject Api.IVenderLikeVotesClient VenderLikeVotesClient

<div @onclick="click">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="@fillColor" style="width: 16px; height: 20px">
        <!-- Font Awesome Free 5.15.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) -->
        <path d="M104 224H24c-13.255 0-24 10.745-24 24v240c0 13.255 10.745 24 24 24h80c13.255 0 24-10.745 24-24V248c0-13.255-10.745-24-24-24zM64 472c-13.255 0-24-10.745-24-24s10.745-24 24-24 24 10.745 24 24-10.745 24-24 24zM384 81.452c0 42.416-25.97 66.208-33.277 94.548h101.723c33.397 0 59.397 27.746 59.553 58.098.084 17.938-7.546 37.249-19.439 49.197l-.11.11c9.836 23.337 8.237 56.037-9.308 79.469 8.681 25.895-.069 57.704-16.382 74.757 4.298 17.598 2.244 32.575-6.148 44.632C440.202 511.587 389.616 512 346.839 512l-2.845-.001c-48.287-.017-87.806-17.598-119.56-31.725-15.957-7.099-36.821-15.887-52.651-16.178-6.54-.12-11.783-5.457-11.783-11.998v-213.77c0-3.2 1.282-6.271 3.558-8.521 39.614-39.144 56.648-80.587 89.117-113.111 14.804-14.832 20.188-37.236 25.393-58.902C282.515 39.293 291.817 0 312 0c24 0 72 8 72 81.452z" />
    </svg>
    <span class="numcount">@VoteCount</span>
</div>
@code {
    [Parameter]
    public int TargetId { get; set; }

    [Parameter]
    public bool IsVoted { get; set; }
    [Parameter]
    public int VoteCount { get; set; }
    [Parameter]
    public string VoteTarget { get; set; }

    public string fillColor
    {
        get
        {
            return IsVoted ? "#aae" : "#ccf";
        }
    }

    private async Task click()
    {
        //currentCount++;
        VoteCount = VoteCount + (IsVoted ? -1 : +1);
        IsVoted = !IsVoted;
        Console.WriteLine("ApiBefore!!");

        switch (VoteTarget)
        {
            case "Donation":
                {
                    var result = await DonateLikeVotesClient.PostDonationLikeVoteAsync(TargetId);
                    IsVoted = result.IsVoted;
                    VoteCount = result.Count;
                }
                break;
            case "Trade":
                {
                    var result = await TradeLikeVotesClient.PostTradeLikeVoteAsync(TargetId);
                    IsVoted = result.IsVoted;
                    VoteCount = result.Count;
                }
                break;
            case "Vender":
                {
                    var result = await VenderLikeVotesClient.PostVenderLikeVoteAsync(TargetId);
                    IsVoted = result.IsVoted;
                    VoteCount = result.Count;
                }
                break;

            default:
                break;
        }
        Console.WriteLine("ApiAfter!!");
    }
}
